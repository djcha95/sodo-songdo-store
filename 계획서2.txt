# 🛍️ 소도몰 프로젝트 개선 로드맵

아래 로드맵은 '즉시 실행 가능한 빠른 개선'부터 시작하여 '중기적 UI/UX 개선', 그리고 '장기적인 핵심 기능 개발' 순으로 구성되어 있습니다.

---

### **1단계: 즉시 실행 가능한 빠른 개선 (난이도: 하)**

가장 빠르게 완료하여 즉각적인 만족감을 얻을 수 있는 작업들입니다. 대부분 간단한 UI 수정이나 설정 변경에 해당합니다.

**1. 고객센터 페이지 활성화** 완료.
* **(난이도: 하)**
* **세부 설명:** 현재 작동하지 않는 고객센터 페이지를 라우터에 연결하여 정상적으로 보이게 합니다.
* **핵심 파일:** `src/App.tsx`, `src/layouts/CustomerLayout.tsx`
* **구현 방안:** React Router 설정에 고객센터 페이지 컴포넌트를 연결하고, 필요한 경우 하단 네비게이션(`BottomNav.tsx`)에도 링크를 추가합니다.

**2. 관리자 페이지 - 주문자 전화번호 뒷자리만 표시** 완료.
* **(난이도: 하)**
* **세부 설명:** 주문 통합 관리 페이지(`OrderListPageAdmin.tsx` 등)에서 고객의 전체 전화번호 대신, 개인정보 보호를 위해 뒷 4자리만 표시합니다. (예: `***-****-1234`)
* **핵심 파일:** `src/pages/admin/OrderListPage.tsx` 또는 관련 주문 관리 컴포넌트
* **구현 방안:** 전화번호 데이터를 화면에 렌더링하는 부분에 `phoneNumber.slice(-4).padStart(phoneNumber.length, '*')` 와 같은 문자열 처리 로직을 적용합니다.

**3. 로딩창을 '소도몰 춤추는 캐릭터'로 변경**
* **(난이도: 하)**
* **세부 설명:** `README.md`에 명시된 공용 로더 컴포넌트의 애니메이션을 새로운 '춤추는 소도몰' GIF 또는 Lottie 애니메이션으로 교체합니다.
* **핵심 파일:** `src/components/common/SodamallLoader.tsx`, `src/components/common/InlineSodamallLoader.tsx`
* **구현 방안:** 기존 로딩 애니메이션 코드를 새로운 이미지나 애니메이션 컴포넌트로 교체합니다.

**4. 장바구니 페이지 - '예약 확정하기' 버튼 하단 고정**
* **(난이도: 하)**
* **세부 설명:** `CartPage.tsx`에서 스크롤을 내려도 '예약 확정하기' 버튼이 포함된 주문 요약 영역이 항상 화면 하단에 고정되도록 합니다.
* **핵심 파일:** `src/pages/customer/CartPage.tsx` 및 관련 CSS 파일
* **구현 방안:** 상세 페이지 하단 UI 고정 문제 해결 경험(`README` #18)과 동일한 Flexbox 구조(스크롤 영역과 하단 고정 영역 분리)를 적용하여 안정적으로 구현합니다.

**5. 상품 상세 페이지 - 옵션별 한정수량 표시**
* **(난이도: 하)**
* **세부 설명:** 상품 상세 페이지(`ProductDetailPage.tsx`)에서 각 판매 옵션(예: 1병, 1박스) 옆에 해당 옵션에 설정된 한정 수량을 명확하게 표시해줍니다.
* **핵심 파일:** `src/pages/customer/ProductDetailPage.tsx`
* **구현 방안:** 선택된 `pricingOption` 객체에서 `limitQuantity` 값을 읽어와 UI에 표시합니다. 값이 없는 경우는 표시하지 않습니다.

---

### **2단계: 중-단기 UI/UX 및 로직 개선 (난이도: 중)**

기존 기능의 사용자 경험을 크게 향상시키는 작업들입니다. 약간의 로직 수정이나 CSS 변경이 필요합니다.

**6. 상품 상세 페이지 - 품절 시 '대기' 표시 로직 수정**
* **(난이도: 중)**
* **세부 설명:** 한정 수량 상품이 품절되었을 때, '앵콜 요청' 대신 '대기 신청' 버튼이 명확하게 표시되도록 구매 가능 여부 판단 로직을 다시 한번 점검하고 수정합니다.
* **핵심 파일:** `src/pages/customer/ProductDetailPage.tsx`
* **구현 방안:** `isCurrentlyPurchasable`, `showEncoreRequestButton` 등의 상태 결정 로직에 '대기 가능 여부(`product.waitlistable`)'와 같은 새로운 조건을 추가하여, '품절' 상태일 때 '대기 신청' 버튼이 우선적으로 노출되도록 조정합니다.

**7. 재고 부족 시 구매 시도 알림**
* **(난이도: 중)**
* **세부 설명:** 남은 재고가 4개일 때, 사용자가 1곽(6개) 옵션을 선택하거나 수량을 5 이상으로 올리려고 하면 "현재 N개만 구매 가능합니다." 와 같은 `toast` 알림을 즉시 표시합니다.
* **핵심 파일:** `src/pages/customer/ProductDetailPage.tsx`, `src/components/customer/ProductCard.tsx`
* **구현 방안:** 수량 변경 함수 또는 옵션 선택 핸들러 내에서, 선택된 수량이 해당 옵션의 실시간 재고(`stock`)를 초과하는지 확인하고, 초과 시 `toast.error()`를 통해 사용자에게 피드백을 주고 수량을 재고에 맞게 조정합니다.

**8. 관리자 상품 리스트 - 페이지네이션 적용**
* **(난이도: 중)**
* **세부 설명:** 관리자 상품 목록 페이지(`ProductListPageAdmin.tsx`)에 페이지네이션을 도입하여 한 페이지에 15~20개의 상품만 표시합니다. 이를 통해 페이지 로딩 성능을 개선하고 관리 편의성을 높입니다.
* **핵심 파일:** `src/pages/admin/ProductListPageAdmin.tsx`, `src/firebase/productService.ts`
* **구현 방안:** `README`의 '앞으로의 개선 방향'에 언급된 대로, `productService.ts`의 상품 조회 함수에 `limit()`과 `startAfter()`를 사용하는 페이지네이션 로직을 추가하고, 관리자 페이지에 '다음', '이전' 버튼 UI를 구현합니다.

**9. 포인트 표시 디자인 변경**
* **(난이도: 중)**
* **세부 설명:** 현재 다소 아쉬운 포인트 표시 UI의 디자인을 더 세련되고 직관적으로 변경합니다.
* **핵심 파일:** 헤더 컴포넌트(`Header.tsx`) 또는 마이페이지(`MyPage.tsx`)
* **구현 방안:** 해당 컴포넌트의 JSX 구조와 CSS를 수정하여 새로운 디자인을 적용합니다.

**10. 전체 알림(Toast) 디자인 및 메시지 통일**
* **(난이도: 중)**
* **세부 설명:** 앱 전체에서 사용되는 `react-hot-toast`의 디자인(아이콘, 색상 등)과 문구를 통일하여 일관된 사용자 경험을 제공합니다.
* **핵심 파일:** `src/App.tsx` (Toaster 설정), 각 `toast` 호출부
* **구현 방안:** `App.tsx`의 `<Toaster />` 컴포넌트에 `toastOptions`를 설정하여 전역 스타일을 지정하고, 자주 사용되는 성공/실패/확인 메시지를 유틸리티 함수로 만들어 호출하여 일관성을 유지합니다.

**11. 모바일 '아래로 당겨서 새로고침' 기능**
* **(난이도: 중)**
* **세부 설명:** 모바일 환경에서 화면 최상단에서 아래로 스크롤을 당기면 페이지가 새로고침되는 기능을 구현합니다.
* **구현 방안:** `touch` 이벤트(`touchstart`, `touchmove`, `touchend`)를 감지하는 커스텀 훅을 만들어, 특정 조건을 만족할 때 `window.location.reload()`를 호출하는 방식으로 구현합니다. 라이브러리 사용도 고려할 수 있습니다.

---

### **3단계: 장기적인 핵심 기능 개발 및 고도화 (난이도: 상)**

새로운 페이지나 복잡한 백엔드 로직이 필요한 주요 기능들입니다. 체계적인 설계가 중요합니다.

**12. 전체 고객 관리 페이지 점검 및 기능 추가**
* **(난이도: 상)**
* **세부 설명:** 전화번호 필드가 추가됨에 따라 전체 고객 관리 페이지(`UserListPageAdmin.tsx`)를 재점검하고, 검색, 필터링, 정렬 등 관리 기능을 고도화합니다.
* **핵심 파일:** 신규 `UserListPageAdmin.tsx` 또는 기존 관리자 페이지
* **구현 방안:** 사용자 목록을 표시하는 테이블을 만들고, Firestore 쿼리를 활용한 검색/필터링 기능을 추가합니다. 사용자 상세 정보 모달을 통해 개별 관리도 가능하게 합니다.

**13. 관리자 페이지 모바일 반응형 디자인 적용**
* **(난이도: 상)**
* **세부 설명:** 모든 관리자 페이지를 모바일 환경에서도 원활하게 사용할 수 있도록 반응형 디자인을 적용합니다. 복잡한 테이블은 카드 형태로 변경하는 등의 전략이 필요합니다.
* **핵심 파일:** `src/pages/admin/` 폴더 내 모든 파일 및 관련 CSS
* **구현 방안:** 미디어 쿼리를 적극적으로 사용하여 화면 너비에 따라 레이아웃이 유연하게 변경되도록 CSS를 수정합니다. 필요시 모바일 전용 컴포넌트를 별도로 만들 수도 있습니다.

**14. 마감 상품(앵콜) 페이지 신설**
* **(난이도: 상)**
* **세부 설명:** 판매가 종료된 모든 상품을 모아서 보여주는 별도의 페이지를 만듭니다. 사용자는 이 페이지에서 상품을 검색하고 '앵콜 요청'을 할 수 있습니다.
* **핵심 파일:** 신규 `EncorePage.tsx`
* **구현 방안:** `status`가 'ended' 또는 'sold_out'인 모든 상품을 조회하는 Firestore 쿼리를 작성하고, 기존 `ProductListPage`와 유사한 UI에 검색 기능과 '앵콜 요청' 기능을 추가하여 페이지를 구성합니다.

**15. 알림 시스템 구축 (포인트, 픽업, 예약 완료 등)**
* **(난이도: 상)**
* **세부 설명:** 포인트 적립, 픽업일 알림, 예약 완료 등 다양한 상황에 대한 사용자 알림 시스템을 구축합니다.
* **핵심 파일:** `src/context/NotificationContext.tsx`, `src/firebase/functions` (백엔드)
* **구현 방안:**
    1.  Firestore에 `notifications` 컬렉션을 설계합니다.
    2.  주문 생성, 포인트 변경 등의 이벤트 발생 시 Cloud Functions를 트리거하여 해당 사용자에게 알림 문서를 생성합니다.
    3.  프론트엔드에서는 `Header` 등에서 실시간으로 알림을 구독하여 새로운 알림을 표시합니다.

**16. '선입고' 알림 기능**
* **(난이도: 상)**
* **세부 설명:** 예정보다 상품이 일찍 입고되었을 때, 해당 상품을 예약한 고객들에게 알림을 보낼 수 있는 관리자 기능을 추가합니다.
* **핵심 파일:** `src/pages/admin/DashboardPage.tsx`, `src/firebase/functions`
* **구현 방안:**
    1.  관리자 페이지에 '선입고 처리' 버튼을 만듭니다.
    2.  버튼 클릭 시 Cloud Function을 호출하여, 해당 상품의 주문자 목록을 조회하고 위 15번에서 구축한 알림 시스템을 통해 "주문하신 상품이 선입고되었습니다!"와 같은 메시지를 보냅니다.

**17. 전체적인 디자인 통일 및 디자인 시스템 구축**
* **(난이도: 상)**
* **세부 설명:** `README`의 제안처럼, 버튼, 색상, 폰트, 간격 등 앱 전체의 디자인 요소를 통일하여 일관성을 확보하고, 재사용 가능한 컴포넌트로 시스템화합니다.
* **구현 방안:** 자주 사용되는 CSS 변수(colors, fonts, spacing)를 `common.css`에 정의하고, `Button`, `Input`, `Modal` 등 기본 UI 컴포넌트를 `src/components/common`에 만들어 프로젝트 전반에서 이를 사용하도록 점진적으로 리팩터링합니다.

---

### **4단계: 사용자 경험 심화 (난이도: 중~상)**

구현의 기술적 난이도나 브라우저 지원 범위를 고려해야 하는 기능들입니다.

**18. 주문 변경 시 진동(Haptic) 피드백**
* **(난이도: 중)**
* **세부 설명:** 주문 상태 변경, 수량 조절 등 주요 액션이 성공했을 때 모바일 기기에서 짧은 진동을 주어 사용자에게 물리적인 피드백을 제공합니다.
* **구현 방안:** Web Vibration API (`navigator.vibrate()`)를 사용합니다. 해당 API는 모바일 브라우저에서만 주로 지원되므로, PC 환경에서는 동작하지 않도록 분기 처리가 필요합니다.

**19. 달력 페이지 개선**
* **(난이도: 미정)**
* **세부 설명:** "개선"의 구체적인 내용이 필요합니다. 픽업일을 달력 형태로 보여주는 UI 개선, 특정 날짜의 픽업 상품 목록 표시 등 다양한 방향이 가능합니다.
* **구현 방안:** 구체적인 요구사항이 정해지면, `react-calendar`와 같은 라이브러리를 사용하거나 커스텀 달력 컴포넌트를 제작하여 요구사항에 맞는 기능을 구현합니다.

+고객센터페이지 이용안내 및 자주 묻는 질문 작성하기.
+ 예약 통합관리 페이지 아래 페이지 번호 만들기
+ 예약 통합관리 페이지에서 중복선택가능하게하기. 그래서 한번에 삭제하게하는거야.
그리고 중복선택한것들은 자동적으로 합계를 계산하게끔 하는것도 좋고.. 
그리고 상태 칼럼에 모아서 보는것도 만들엇으면 좋겠네. 선입금만 따로, 노쇼만 따로 이런식으로.
+총회원수도 보여줘야하고.